#!/bin/bash

# Application Management Script
# {{ app_name }} - Production Environment

set -e

APP_NAME="{{ app_name }}"
APP_DIR="{{ app_dir }}"
APP_USER="{{ app_user }}"
COMPOSE_FILE="$APP_DIR/source/docker-compose.yml"
OVERRIDE_FILE="$APP_DIR/source/docker-compose.override.yml"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if running as correct user
check_user() {
    if [ "$USER" != "$APP_USER" ]; then
        error "This script must be run as $APP_USER user"
        exit 1
    fi
}

# Check if Docker Compose file exists
check_compose_file() {
    if [ ! -f "$COMPOSE_FILE" ]; then
        error "Docker Compose file not found: $COMPOSE_FILE"
        exit 1
    fi
}

# Get service status
get_status() {
    cd "$APP_DIR/source"
    docker-compose ps --format "table {{.Name}}\t{{.State}}\t{{.Status}}"
}

# Start services
start_services() {
    log "Starting $APP_NAME services..."
    cd "$APP_DIR/source"
    
    # Pull latest images
    docker-compose pull
    
    # Start services
    docker-compose up -d
    
    # Wait for health checks
    log "Waiting for services to be healthy..."
    sleep 30
    
    # Check health
    if check_health; then
        success "$APP_NAME started successfully"
    else
        error "Some services failed to start properly"
        get_status
        exit 1
    fi
}

# Stop services
stop_services() {
    log "Stopping $APP_NAME services..."
    cd "$APP_DIR/source"
    docker-compose down
    success "$APP_NAME stopped successfully"
}

# Restart services
restart_services() {
    log "Restarting $APP_NAME services..."
    stop_services
    sleep 5
    start_services
}

# Check health of services
check_health() {
    local healthy=true
    
    # Check main application
    if ! curl -sf http://localhost:8000/api/health > /dev/null; then
        error "Backend API health check failed"
        healthy=false
    fi
    
    # Check frontend
    if ! curl -sf http://localhost:3000 > /dev/null; then
        error "Frontend health check failed"
        healthy=false
    fi
    
    # Check database
    if ! docker-compose exec -T postgres pg_isready -U startup > /dev/null; then
        error "Database health check failed"
        healthy=false
    fi
    
    # Check Redis
    if ! docker-compose exec -T redis redis-cli ping > /dev/null; then
        error "Redis health check failed"
        healthy=false
    fi
    
    if [ "$healthy" = true ]; then
        success "All services are healthy"
        return 0
    else
        return 1
    fi
}

# View logs
view_logs() {
    local service=${1:-}
    cd "$APP_DIR/source"
    
    if [ -n "$service" ]; then
        docker-compose logs -f "$service"
    else
        docker-compose logs -f
    fi
}

# Update application
update_app() {
    log "Updating $APP_NAME..."
    
    # Create backup before update
    "$APP_DIR/scripts/backup.sh"
    
    # Pull latest code
    cd "$APP_DIR/source"
    git pull origin main
    
    # Rebuild and restart
    docker-compose build --no-cache
    restart_services
    
    success "$APP_NAME updated successfully"
}

# Scale services
scale_services() {
    local service=$1
    local replicas=$2
    
    if [ -z "$service" ] || [ -z "$replicas" ]; then
        error "Usage: scale <service> <replicas>"
        exit 1
    fi
    
    log "Scaling $service to $replicas replicas..."
    cd "$APP_DIR/source"
    docker-compose up -d --scale "$service=$replicas"
    success "Scaled $service to $replicas replicas"
}

# Clean up Docker resources
cleanup() {
    log "Cleaning up Docker resources..."
    
    # Remove stopped containers
    docker container prune -f
    
    # Remove unused images
    docker image prune -f
    
    # Remove unused volumes
    docker volume prune -f
    
    # Remove unused networks
    docker network prune -f
    
    success "Docker cleanup completed"
}

# Show resource usage
show_resources() {
    log "Resource usage for $APP_NAME:"
    echo
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
}

# Backup application
backup() {
    "$APP_DIR/scripts/backup.sh"
}

# Restore application
restore() {
    local backup_file=$1
    if [ -z "$backup_file" ]; then
        error "Usage: restore <backup_file>"
        exit 1
    fi
    "$APP_DIR/scripts/restore.sh" "$backup_file"
}

# Show help
show_help() {
    echo "Usage: $0 {start|stop|restart|status|health|logs|update|scale|cleanup|resources|backup|restore|help}"
    echo
    echo "Commands:"
    echo "  start       Start all services"
    echo "  stop        Stop all services"
    echo "  restart     Restart all services"
    echo "  status      Show service status"
    echo "  health      Check service health"
    echo "  logs        View logs (optionally specify service)"
    echo "  update      Update application from git"
    echo "  scale       Scale a service (usage: scale <service> <replicas>)"
    echo "  cleanup     Clean up Docker resources"
    echo "  resources   Show resource usage"
    echo "  backup      Create backup"
    echo "  restore     Restore from backup (usage: restore <backup_file>)"
    echo "  help        Show this help message"
    echo
    echo "Examples:"
    echo "  $0 start"
    echo "  $0 logs backend-api"
    echo "  $0 scale frontend 3"
    echo "  $0 restore /path/to/backup.tar.gz"
}

# Main script logic
main() {
    check_user
    check_compose_file
    
    case "${1:-}" in
        start)
            start_services
            ;;
        stop)
            stop_services
            ;;
        restart)
            restart_services
            ;;
        status)
            get_status
            ;;
        health)
            check_health
            ;;
        logs)
            view_logs "${2:-}"
            ;;
        update)
            update_app
            ;;
        scale)
            scale_services "$2" "$3"
            ;;
        cleanup)
            cleanup
            ;;
        resources)
            show_resources
            ;;
        backup)
            backup
            ;;
        restore)
            restore "$2"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            error "Unknown command: ${1:-}"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"

