name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: services/frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: services/frontend
      run: npm ci
    
    - name: Run tests
      working-directory: services/frontend
      run: npm run test
    
    - name: Build frontend
      working-directory: services/frontend
      run: npm run build

  # Test Backend APIs
  test-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies - Healthcheck API
      working-directory: services/healthcheck-api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Test Healthcheck API
      working-directory: services/healthcheck-api
      run: |
        python -m pytest tests/ -v --cov=src
    
    - name: Install dependencies - Project Bridge
      working-directory: services/project-bridge
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Test Project Bridge
      working-directory: services/project-bridge
      run: |
        python -m pytest tests/ -v --cov=src

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build-and-push:
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [frontend, healthcheck-api, project-bridge]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: services/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Infrastructure Validation
  validate-terraform:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Terraform Format Check
      working-directory: iac/terraform
      run: terraform fmt -check
    
    - name: Terraform Init
      working-directory: iac/terraform
      run: terraform init -backend=false
    
    - name: Terraform Validate
      working-directory: iac/terraform
      run: terraform validate

  # Ansible Lint
  lint-ansible:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Ansible and ansible-lint
      run: |
        pip install ansible ansible-lint
    
    - name: Run ansible-lint
      working-directory: iac/ansible
      run: ansible-lint deploy.yml

  # Deploy to Staging
  deploy-staging:
    needs: [build-and-push, validate-terraform, lint-ansible]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Configure GCP credentials
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Deploy to staging
      working-directory: iac/terraform
      run: |
        terraform init
        terraform workspace select staging || terraform workspace new staging
        terraform plan -var="environment=staging" -var="project_id=${{ secrets.GCP_PROJECT_ID }}"
        terraform apply -auto-approve -var="environment=staging" -var="project_id=${{ secrets.GCP_PROJECT_ID }}"

  # Deploy to Production
  deploy-production:
    needs: [build-and-push, validate-terraform, lint-ansible]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Configure GCP credentials
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Deploy to production
      working-directory: iac/terraform
      run: |
        terraform init
        terraform workspace select production || terraform workspace new production
        terraform plan -var="environment=production" -var="project_id=${{ secrets.GCP_PROJECT_ID }}"
        terraform apply -auto-approve -var="environment=production" -var="project_id=${{ secrets.GCP_PROJECT_ID }}"
    
    - name: Configure servers with Ansible
      working-directory: iac/ansible
      run: |
        pip install ansible
        ansible-playbook -i inventory.yml deploy.yml --extra-vars "environment=production"

  # Notify deployment
  notify:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

