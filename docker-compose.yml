
services:
  # Frontend Service
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: startup-frontend
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    networks:
      - startup-network-alt
    # volume path icon
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"

  # Backend API Service
  backend-api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
    container_name: startup-backend-api
    ports:
      - "8090:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://startup:startup_password@postgres:5432/startup_db
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGINS=http://localhost:3000,https://jylmqyrs.manus.space
    networks:
      - startup-network-alt
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - ./logs:/app/logs

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: startup-postgres
    environment:
      - POSTGRES_DB=startup_db
      - POSTGRES_USER=startup
      - POSTGRES_PASSWORD=startup_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - startup-network-alt
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U startup -d startup_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: startup-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - startup-network-alt
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: startup-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/nginx-logs
    networks:
      - startup-network-alt
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: startup-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - startup-network-alt
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: startup-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_change_me
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - startup-network-alt
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Health Check Service
  healthcheck:
    build:
      context: ./services/healthcheck-api
      dockerfile: Dockerfile
    container_name: startup-healthcheck
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://startup:startup_password@postgres:5432/startup_db
      - REDIS_URL=redis://redis:6379/0
      - SERVICES_TO_CHECK=frontend:3000,backend-api:8000,postgres:5432,redis:6379
    networks:
      - startup-network-alt
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Project Bridge Service
  project-bridge:
    build:
      context: ./services/project-bridge
      dockerfile: Dockerfile
    container_name: startup-project-bridge
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://startup:startup_password@postgres:5432/startup_db
    networks:
      - startup-network-alt
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: startup-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - startup-network-alt
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: startup-cadvisor
    ports:
      - "8086:8080"  # expose cAdvisor on localhost:8086
    privileged: true  # necessary for full metrics
    networks:
      - startup-network-alt
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"



  # Alertmanager for Alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: startup-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./docker/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - startup-network-alt
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Loki for Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: startup-loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker/monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: ["-config.file=/etc/loki/local-config.yaml"]
    networks:
      - startup-network-alt
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"


  # Promtail for Log Collection
  promtail:
    image: grafana/promtail:latest
    container_name: startup-promtail
    volumes:
      - ./docker/monitoring/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - nginx_logs:/var/nginx-logs:ro
      - ./logs:/app-logs:ro 
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml

    networks:
      - startup-network-alt
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  tailscale:
    image: tailscale/tailscale:latest
    hostname: startup-admin-docker
    environment:
      - TS_AUTHKEY=${TAILSCALE_AUTHKEY}
      - TS_USERSPACE=true
      - TS_HOSTNAME=startup-admin-docker
      - TS_ACCEPT_DNS=true
      - TS_EXTRA_ARGS=--accept-routes
    volumes:
      - tailscale-state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
    networks:
      - admin-network
    restart: unless-stopped
    command: tailscaled

  admin-interface:
    build:
      context: ./admin-interface
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=http://backend-api:5000  # Make sure backend-api is defined or externally accessible
      - REACT_APP_ADMIN_MODE=true
      - NODE_ENV=production

    ports:
      - "9999:80"  # expose to localhost:8085  
    networks:
      - admin-network
      - startup-network-alt
    restart: unless-stopped
    labels:
      - "tailscale.expose=8080"

  prometheus-admin:
    image: prom/prometheus:latest
    volumes:
      - ./docker/monitoring/prometheus-admin.yml:/etc/prometheus/prometheus.yml
      - prometheus-admin-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.listen-address=0.0.0.0:9090'
    networks:
      - admin-network
      - startup-network-alt
    restart: unless-stopped
    labels:
      - "tailscale.expose=9090"

  grafana-admin:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin_change_me}
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_DOMAIN=grafana.startup.local
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - grafana-admin-data:/var/lib/grafana
      - ./docker/monitoring/grafana/admin-dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/monitoring/grafana/admin-datasources:/etc/grafana/provisioning/datasources

    networks:
      - admin-network
    restart: unless-stopped
    labels:
      - "tailscale.expose=3000"

  nginx-admin:
    image: nginx:alpine
    volumes:
      - ./docker/nginx/admin-nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8085:8080"  # expose to localhost:8085  

    networks:
      - admin-network
      - startup-network-alt   # <-- add this if backend-api is on this network
    restart: unless-stopped
    labels:
      - "tailscale.expose=80"

networks:
  startup-network-alt:
    external: true
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16
  admin-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16
    internal: false

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local
  nginx_logs:
    driver: local
  tailscale-state:
    driver: local
  prometheus-admin-data:
    driver: local
  grafana-admin-data:
    driver: local


